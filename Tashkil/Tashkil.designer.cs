#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tashkil
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Tashkil")]
	public partial class TashkilDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCircle(Circle instance);
    partial void UpdateCircle(Circle instance);
    partial void DeleteCircle(Circle instance);
    partial void InsertCenter(Center instance);
    partial void UpdateCenter(Center instance);
    partial void DeleteCenter(Center instance);
    partial void InsertMosku(Mosku instance);
    partial void UpdateMosku(Mosku instance);
    partial void DeleteMosku(Mosku instance);
    partial void InsertHistory(History instance);
    partial void UpdateHistory(History instance);
    partial void DeleteHistory(History instance);
    #endregion
		
		public TashkilDataContext() : 
				base(global::Tashkil.Properties.Settings.Default.TashkilConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TashkilDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TashkilDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TashkilDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TashkilDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Circle> Circles
		{
			get
			{
				return this.GetTable<Circle>();
			}
		}
		
		public System.Data.Linq.Table<Center> Centers
		{
			get
			{
				return this.GetTable<Center>();
			}
		}
		
		public System.Data.Linq.Table<Mosku> Moskus
		{
			get
			{
				return this.GetTable<Mosku>();
			}
		}
		
		public System.Data.Linq.Table<History> Histories
		{
			get
			{
				return this.GetTable<History>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User
	{
		
		private System.Nullable<int> _Id;
		
		private string _UserName;
		
		private string _Password;
		
		public User()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int")]
		public System.Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Circle")]
	public partial class Circle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _MarkazID;
		
		private EntitySet<Mosku> _Moskus;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMarkazIDChanging(int value);
    partial void OnMarkazIDChanged();
    #endregion
		
		public Circle()
		{
			this._Moskus = new EntitySet<Mosku>(new Action<Mosku>(this.attach_Moskus), new Action<Mosku>(this.detach_Moskus));
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkazID", DbType="Int NOT NULL")]
		public int MarkazID
		{
			get
			{
				return this._MarkazID;
			}
			set
			{
				if ((this._MarkazID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkazIDChanging(value);
					this.SendPropertyChanging();
					this._MarkazID = value;
					this.SendPropertyChanged("MarkazID");
					this.OnMarkazIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Circle_Mosku", Storage="_Moskus", ThisKey="ID", OtherKey="HalakaID")]
		public EntitySet<Mosku> Moskus
		{
			get
			{
				return this._Moskus;
			}
			set
			{
				this._Moskus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Circle", Storage="_Center", ThisKey="MarkazID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Circles.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Circles.Add(this);
						this._MarkazID = value.ID;
					}
					else
					{
						this._MarkazID = default(int);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Moskus(Mosku entity)
		{
			this.SendPropertyChanging();
			entity.Circle = this;
		}
		
		private void detach_Moskus(Mosku entity)
		{
			this.SendPropertyChanging();
			entity.Circle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Center")]
	public partial class Center : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Telephone;
		
		private EntitySet<Circle> _Circles;
		
		private EntitySet<Mosku> _Moskus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    #endregion
		
		public Center()
		{
			this._Circles = new EntitySet<Circle>(new Action<Circle>(this.attach_Circles), new Action<Circle>(this.detach_Circles));
			this._Moskus = new EntitySet<Mosku>(new Action<Mosku>(this.attach_Moskus), new Action<Mosku>(this.detach_Moskus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="NVarChar(50)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Circle", Storage="_Circles", ThisKey="ID", OtherKey="MarkazID")]
		public EntitySet<Circle> Circles
		{
			get
			{
				return this._Circles;
			}
			set
			{
				this._Circles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Mosku", Storage="_Moskus", ThisKey="ID", OtherKey="MarkazID")]
		public EntitySet<Mosku> Moskus
		{
			get
			{
				return this._Moskus;
			}
			set
			{
				this._Moskus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Circles(Circle entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Circles(Circle entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_Moskus(Mosku entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Moskus(Mosku entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mosku")]
	public partial class Mosku : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _HalakaID;
		
		private int _MarkazID;
		
		private int _MuslimCount;
		
		private int _PrayerCount;
		
		private int _MemberCount;
		
		private EntitySet<History> _Histories;
		
		private EntitySet<History> _Histories1;
		
		private EntityRef<Circle> _Circle;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHalakaIDChanging(int value);
    partial void OnHalakaIDChanged();
    partial void OnMarkazIDChanging(int value);
    partial void OnMarkazIDChanged();
    partial void OnMuslimCountChanging(int value);
    partial void OnMuslimCountChanged();
    partial void OnPrayerCountChanging(int value);
    partial void OnPrayerCountChanged();
    partial void OnMemberCountChanging(int value);
    partial void OnMemberCountChanged();
    #endregion
		
		public Mosku()
		{
			this._Histories = new EntitySet<History>(new Action<History>(this.attach_Histories), new Action<History>(this.detach_Histories));
			this._Histories1 = new EntitySet<History>(new Action<History>(this.attach_Histories1), new Action<History>(this.detach_Histories1));
			this._Circle = default(EntityRef<Circle>);
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HalakaID", DbType="Int NOT NULL")]
		public int HalakaID
		{
			get
			{
				return this._HalakaID;
			}
			set
			{
				if ((this._HalakaID != value))
				{
					if (this._Circle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHalakaIDChanging(value);
					this.SendPropertyChanging();
					this._HalakaID = value;
					this.SendPropertyChanged("HalakaID");
					this.OnHalakaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkazID", DbType="Int NOT NULL")]
		public int MarkazID
		{
			get
			{
				return this._MarkazID;
			}
			set
			{
				if ((this._MarkazID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkazIDChanging(value);
					this.SendPropertyChanging();
					this._MarkazID = value;
					this.SendPropertyChanged("MarkazID");
					this.OnMarkazIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MuslimCount", DbType="Int NOT NULL")]
		public int MuslimCount
		{
			get
			{
				return this._MuslimCount;
			}
			set
			{
				if ((this._MuslimCount != value))
				{
					this.OnMuslimCountChanging(value);
					this.SendPropertyChanging();
					this._MuslimCount = value;
					this.SendPropertyChanged("MuslimCount");
					this.OnMuslimCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrayerCount", DbType="Int NOT NULL")]
		public int PrayerCount
		{
			get
			{
				return this._PrayerCount;
			}
			set
			{
				if ((this._PrayerCount != value))
				{
					this.OnPrayerCountChanging(value);
					this.SendPropertyChanging();
					this._PrayerCount = value;
					this.SendPropertyChanged("PrayerCount");
					this.OnPrayerCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberCount", DbType="Int NOT NULL")]
		public int MemberCount
		{
			get
			{
				return this._MemberCount;
			}
			set
			{
				if ((this._MemberCount != value))
				{
					this.OnMemberCountChanging(value);
					this.SendPropertyChanging();
					this._MemberCount = value;
					this.SendPropertyChanged("MemberCount");
					this.OnMemberCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mosku_History", Storage="_Histories", ThisKey="ID", OtherKey="Source")]
		public EntitySet<History> Histories
		{
			get
			{
				return this._Histories;
			}
			set
			{
				this._Histories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mosku_History1", Storage="_Histories1", ThisKey="ID", OtherKey="Destination")]
		public EntitySet<History> Histories1
		{
			get
			{
				return this._Histories1;
			}
			set
			{
				this._Histories1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Circle_Mosku", Storage="_Circle", ThisKey="HalakaID", OtherKey="ID", IsForeignKey=true)]
		public Circle Circle
		{
			get
			{
				return this._Circle.Entity;
			}
			set
			{
				Circle previousValue = this._Circle.Entity;
				if (((previousValue != value) 
							|| (this._Circle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Circle.Entity = null;
						previousValue.Moskus.Remove(this);
					}
					this._Circle.Entity = value;
					if ((value != null))
					{
						value.Moskus.Add(this);
						this._HalakaID = value.ID;
					}
					else
					{
						this._HalakaID = default(int);
					}
					this.SendPropertyChanged("Circle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Mosku", Storage="_Center", ThisKey="MarkazID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Moskus.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Moskus.Add(this);
						this._MarkazID = value.ID;
					}
					else
					{
						this._MarkazID = default(int);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Mosku = this;
		}
		
		private void detach_Histories(History entity)
		{
			this.SendPropertyChanging();
			entity.Mosku = null;
		}
		
		private void attach_Histories1(History entity)
		{
			this.SendPropertyChanging();
			entity.Mosku1 = this;
		}
		
		private void detach_Histories1(History entity)
		{
			this.SendPropertyChanging();
			entity.Mosku1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.History")]
	public partial class History : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Source;
		
		private int _Destination;
		
		private System.DateTime _Date;
		
		private EntityRef<Mosku> _Mosku;
		
		private EntityRef<Mosku> _Mosku1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSourceChanging(int value);
    partial void OnSourceChanged();
    partial void OnDestinationChanging(int value);
    partial void OnDestinationChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public History()
		{
			this._Mosku = default(EntityRef<Mosku>);
			this._Mosku1 = default(EntityRef<Mosku>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="Int NOT NULL")]
		public int Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					if (this._Mosku.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Destination", DbType="Int NOT NULL")]
		public int Destination
		{
			get
			{
				return this._Destination;
			}
			set
			{
				if ((this._Destination != value))
				{
					if (this._Mosku1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationChanging(value);
					this.SendPropertyChanging();
					this._Destination = value;
					this.SendPropertyChanged("Destination");
					this.OnDestinationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mosku_History", Storage="_Mosku", ThisKey="Source", OtherKey="ID", IsForeignKey=true)]
		public Mosku Mosku
		{
			get
			{
				return this._Mosku.Entity;
			}
			set
			{
				Mosku previousValue = this._Mosku.Entity;
				if (((previousValue != value) 
							|| (this._Mosku.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mosku.Entity = null;
						previousValue.Histories.Remove(this);
					}
					this._Mosku.Entity = value;
					if ((value != null))
					{
						value.Histories.Add(this);
						this._Source = value.ID;
					}
					else
					{
						this._Source = default(int);
					}
					this.SendPropertyChanged("Mosku");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mosku_History1", Storage="_Mosku1", ThisKey="Destination", OtherKey="ID", IsForeignKey=true)]
		public Mosku Mosku1
		{
			get
			{
				return this._Mosku1.Entity;
			}
			set
			{
				Mosku previousValue = this._Mosku1.Entity;
				if (((previousValue != value) 
							|| (this._Mosku1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mosku1.Entity = null;
						previousValue.Histories1.Remove(this);
					}
					this._Mosku1.Entity = value;
					if ((value != null))
					{
						value.Histories1.Add(this);
						this._Destination = value.ID;
					}
					else
					{
						this._Destination = default(int);
					}
					this.SendPropertyChanged("Mosku1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
