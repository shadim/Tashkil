using System;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using Tashkil.Properties;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tashkil
{
    [Database(Name="Tashkil")]
	public partial class TashkilDataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHalaka(Halaka instance);
    partial void UpdateHalaka(Halaka instance);
    partial void DeleteHalaka(Halaka instance);
    partial void InsertMarkaz(Markaz instance);
    partial void UpdateMarkaz(Markaz instance);
    partial void DeleteMarkaz(Markaz instance);
    partial void InsertMasjed(Masjed instance);
    partial void UpdateMasjed(Masjed instance);
    partial void DeleteMasjed(Masjed instance);
    #endregion
		
		public TashkilDataContext() : 
				base(Settings.Default.TashkilConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TashkilDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TashkilDataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TashkilDataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TashkilDataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<Halaka> Halakas
		{
			get
			{
				return this.GetTable<Halaka>();
			}
		}
		
		public Table<Markaz> Markazs
		{
			get
			{
				return this.GetTable<Markaz>();
			}
		}
		
		public Table<Masjed> Masjeds
		{
			get
			{
				return this.GetTable<Masjed>();
			}
		}
		
		public Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[Table(Name="dbo.Halaka")]
	public partial class Halaka : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _MarkazID;
		
		private EntitySet<Masjed> _Masjeds;
		
		private EntityRef<Markaz> _Markaz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMarkazIDChanging(int value);
    partial void OnMarkazIDChanged();
    #endregion
		
		public Halaka()
		{
			this._Masjeds = new EntitySet<Masjed>(new Action<Masjed>(this.attach_Masjeds), new Action<Masjed>(this.detach_Masjeds));
			this._Markaz = default(EntityRef<Markaz>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_MarkazID", DbType="Int NOT NULL")]
		public int MarkazID
		{
			get
			{
				return this._MarkazID;
			}
			set
			{
				if ((this._MarkazID != value))
				{
					if (this._Markaz.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkazIDChanging(value);
					this.SendPropertyChanging();
					this._MarkazID = value;
					this.SendPropertyChanged("MarkazID");
					this.OnMarkazIDChanged();
				}
			}
		}
		
		[Association(Name="Halaka_Masjed", Storage="_Masjeds", ThisKey="ID", OtherKey="HalakaID")]
		public EntitySet<Masjed> Masjeds
		{
			get
			{
				return this._Masjeds;
			}
			set
			{
				this._Masjeds.Assign(value);
			}
		}
		
		[Association(Name="Markaz_Halaka", Storage="_Markaz", ThisKey="MarkazID", OtherKey="ID", IsForeignKey=true)]
		public Markaz Markaz
		{
			get
			{
				return this._Markaz.Entity;
			}
			set
			{
				Markaz previousValue = this._Markaz.Entity;
				if (((previousValue != value) 
							|| (this._Markaz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Markaz.Entity = null;
						previousValue.Halakas.Remove(this);
					}
					this._Markaz.Entity = value;
					if ((value != null))
					{
						value.Halakas.Add(this);
						this._MarkazID = value.ID;
					}
					else
					{
						this._MarkazID = default(int);
					}
					this.SendPropertyChanged("Markaz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Masjeds(Masjed entity)
		{
			this.SendPropertyChanging();
			entity.Halaka = this;
		}
		
		private void detach_Masjeds(Masjed entity)
		{
			this.SendPropertyChanging();
			entity.Halaka = null;
		}
	}
	
	[Table(Name="dbo.Markaz")]
	public partial class Markaz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Telephone;
		
		private EntitySet<Halaka> _Halakas;
		
		private EntitySet<Masjed> _Masjeds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    #endregion
		
		public Markaz()
		{
			this._Halakas = new EntitySet<Halaka>(new Action<Halaka>(this.attach_Halakas), new Action<Halaka>(this.detach_Halakas));
			this._Masjeds = new EntitySet<Masjed>(new Action<Masjed>(this.attach_Masjeds), new Action<Masjed>(this.detach_Masjeds));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Telephone", DbType="NVarChar(50)")]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[Association(Name="Markaz_Halaka", Storage="_Halakas", ThisKey="ID", OtherKey="MarkazID")]
		public EntitySet<Halaka> Halakas
		{
			get
			{
				return this._Halakas;
			}
			set
			{
				this._Halakas.Assign(value);
			}
		}
		
		[Association(Name="Markaz_Masjed", Storage="_Masjeds", ThisKey="ID", OtherKey="MarkazID")]
		public EntitySet<Masjed> Masjeds
		{
			get
			{
				return this._Masjeds;
			}
			set
			{
				this._Masjeds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Halakas(Halaka entity)
		{
			this.SendPropertyChanging();
			entity.Markaz = this;
		}
		
		private void detach_Halakas(Halaka entity)
		{
			this.SendPropertyChanging();
			entity.Markaz = null;
		}
		
		private void attach_Masjeds(Masjed entity)
		{
			this.SendPropertyChanging();
			entity.Markaz = this;
		}
		
		private void detach_Masjeds(Masjed entity)
		{
			this.SendPropertyChanging();
			entity.Markaz = null;
		}
	}
	
	[Table(Name="dbo.Masjed")]
	public partial class Masjed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _HalakaID;
		
		private int _MarkazID;
		
		private EntityRef<Halaka> _Halaka;
		
		private EntityRef<Markaz> _Markaz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHalakaIDChanging(int value);
    partial void OnHalakaIDChanged();
    partial void OnMarkazIDChanging(int value);
    partial void OnMarkazIDChanged();
    #endregion
		
		public Masjed()
		{
			this._Halaka = default(EntityRef<Halaka>);
			this._Markaz = default(EntityRef<Markaz>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_HalakaID", DbType="Int NOT NULL")]
		public int HalakaID
		{
			get
			{
				return this._HalakaID;
			}
			set
			{
				if ((this._HalakaID != value))
				{
					if (this._Halaka.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHalakaIDChanging(value);
					this.SendPropertyChanging();
					this._HalakaID = value;
					this.SendPropertyChanged("HalakaID");
					this.OnHalakaIDChanged();
				}
			}
		}
		
		[Column(Storage="_MarkazID", DbType="Int NOT NULL")]
		public int MarkazID
		{
			get
			{
				return this._MarkazID;
			}
			set
			{
				if ((this._MarkazID != value))
				{
					if (this._Markaz.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkazIDChanging(value);
					this.SendPropertyChanging();
					this._MarkazID = value;
					this.SendPropertyChanged("MarkazID");
					this.OnMarkazIDChanged();
				}
			}
		}
		
		[Association(Name="Halaka_Masjed", Storage="_Halaka", ThisKey="HalakaID", OtherKey="ID", IsForeignKey=true)]
		public Halaka Halaka
		{
			get
			{
				return this._Halaka.Entity;
			}
			set
			{
				Halaka previousValue = this._Halaka.Entity;
				if (((previousValue != value) 
							|| (this._Halaka.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Halaka.Entity = null;
						previousValue.Masjeds.Remove(this);
					}
					this._Halaka.Entity = value;
					if ((value != null))
					{
						value.Masjeds.Add(this);
						this._HalakaID = value.ID;
					}
					else
					{
						this._HalakaID = default(int);
					}
					this.SendPropertyChanged("Halaka");
				}
			}
		}
		
		[Association(Name="Markaz_Masjed", Storage="_Markaz", ThisKey="MarkazID", OtherKey="ID", IsForeignKey=true)]
		public Markaz Markaz
		{
			get
			{
				return this._Markaz.Entity;
			}
			set
			{
				Markaz previousValue = this._Markaz.Entity;
				if (((previousValue != value) 
							|| (this._Markaz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Markaz.Entity = null;
						previousValue.Masjeds.Remove(this);
					}
					this._Markaz.Entity = value;
					if ((value != null))
					{
						value.Masjeds.Add(this);
						this._MarkazID = value.ID;
					}
					else
					{
						this._MarkazID = default(int);
					}
					this.SendPropertyChanged("Markaz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User
	{
		
		private Nullable<int> _Id;
		
		private string _UserName;
		
		private string _Password;
		
		public User()
		{
		}
		
		[Column(Storage="_Id", DbType="Int")]
		public Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
